name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

permissions:
  actions: read
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0

      # Setup Node.js for frontend
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      # Setup .NET for backend
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # Install frontend dependencies
      - run: yarn install --frozen-lockfile
      
      - uses: nrwl/nx-set-shas@v4
      
      # Restore .NET dependencies for backend
      - run: yarn nx affected -t restore

      # Run lint for frontend projects
      - run: yarn nx affected -t lint
      
      # Run tests for all affected projects  
      - run: yarn nx affected -t test
      
      # Build all affected projects
      - run: yarn nx affected -t build

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    strategy:
      matrix:
        service: [frontend, backend]
    steps:
      - uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0

      # Setup Node.js for frontend builds
      - uses: actions/setup-node@v4
        if: matrix.service == 'frontend'
        with:
          node-version: 20
          cache: 'yarn'

      # Install dependencies for frontend
      - run: yarn install --frozen-lockfile
        if: matrix.service == 'frontend'

      # Setup .NET for backend builds
      - uses: actions/setup-dotnet@v4
        if: matrix.service == 'backend'
        with:
          dotnet-version: '9.0.x'

      # Log in to Container Registry
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata for Docker
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Staging
        run: |
          echo "ðŸš€ Deploying to staging environment"
          echo "This would typically involve:"
          echo "  - Updating Kubernetes manifests"
          echo "  - Applying configurations"
          echo "  - Running health checks"
          # Add your staging deployment commands here

  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Production
        run: |
          echo "ðŸš€ Deploying to production environment"
          echo "This would typically involve:"
          echo "  - Updating production Kubernetes cluster"
          echo "  - Running database migrations"
          echo "  - Performing health checks"
          echo "  - Sending notifications"
          # Add your production deployment commands here

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
